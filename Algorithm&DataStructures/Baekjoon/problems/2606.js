// const input = parseInt(require("fs").readFileSync("/dev/stdin").toString());
const input = require("fs")
  .readFileSync("./example.txt")
  .toString()
  .split("\r\n");
/**
 * 신종 바이러스인 웜 바이러스는 네트워크를 통해 전파된다. 한 컴퓨터가 웜 바이러스에 걸리면 그 컴퓨터와 네트워크 상에서 연결되어 있는 모든 컴퓨터는 웜 바이러스에 걸리게 된다.
 *
 * 예를 들어 7대의 컴퓨터가 <그림 1>과 같이 네트워크 상에서 연결되어 있다고 하자. 1번 컴퓨터가 웜 바이러스에 걸리면 웜 바이러스는 2번과 5번 컴퓨터를 거쳐 3번과 6번 컴퓨터까지 전파되어 2, 3, 5, 6 네 대의 컴퓨터는 웜 바이러스에 걸리게 된다. 하지만 4번과 7번 컴퓨터는 1번 컴퓨터와 네트워크상에서 연결되어 있지 않기 때문에 영향을 받지 않는다.
 *
 * 어느 날 1번 컴퓨터가 웜 바이러스에 걸렸다. 컴퓨터의 수와 네트워크 상에서 서로 연결되어 있는 정보가 주어질 때, 1번 컴퓨터를 통해 웜 바이러스에 걸리게 되는 컴퓨터의 수를 출력하는 프로그램을 작성하시오.
 */

const [comCount, networkCount, ...pairArray] = input;

if (comCount == 0 || networkCount == 0) {
  console.log(0);
  return;
}

const pairInfo = {};

for (const pair of pairArray) {
  const [comA, comB] = pair.split(" ");
  pairInfo[comA] = [...(pairInfo[comA] ?? []), comB];
  pairInfo[comB] = [...(pairInfo[comB] ?? []), comA];
}

const virus = [null, true];
const dfs = (index) => {
  if (!pairInfo[index]) return;

  for (const com of pairInfo[index]) {
    if (virus[com]) continue;
    virus[com] = true;
    dfs(com);
  }
  pairInfo[index];
};

dfs(1);

console.log(virus.reduce((count, com) => (com ? count + 1 : count), 0) - 1);

//   1 2 3 4 5 6 7
// 1[0,1,0,0,1,0,0]
// 2[1,0,1,0,1,0,0]
// 3[0,1,0,0,0,0,0]
// 4[0,0,0,0,0,0,1]
// 5[1,1,0,0,0,1,0]
// 6[0,0,0,0,1,0,0]
// 7[0,0,0,1,0,0,0]

// 1(2) > 2(2) > 3(0)
//             > 5(1) > 6(0)
//      > 5(1) > 6(0)

//   1 2 3 4 5 6 7 8 9 0
// 1[0,0,0,0,0,0,0,0,0,1]
// 2[0,0,1,0,0,0,0,0,0,1]
// 3[0,1,0,1,0,0,0,0,0,0]
// 4[0,0,1,0,1,0,0,0,0,0]
// 5[0,0,0,1,0,1,0,0,0,0]
// 6[0,0,0,0,1,0,1,0,0,0]
// 7[0,0,0,0,0,1,0,1,0,0]
// 8[0,0,0,0,0,0,1,0,1,0]
// 9[0,0,0,0,0,0,0,1,0,0]
// 0[1,1,0,0,0,0,0,0,0,0]

//   1 2 3 4
// 1[0,1,0,0]
// 2[1,0,1,0]
// 3[0,1,0,1]
// 4[0,0,1,0]
// 4
// 3
// 1 2
// 4 3
// 2 3 # 3

//   1 2 3 4 5 6 7
// 1[0,1,0,0,1,0,0]
// 2[1,0,1,0,1,0,0]
// 3[0,1,0,0,0,0,0]
// 4[0,0,0,0,0,0,1]
// 5[1,1,0,0,0,1,0]
// 6[0,0,0,0,1,0,0]
// 7[0,0,0,1,0,0,0]
// 7
// 6
// 2 3
// 1 2
// 1 5
// 5 2
// 5 6
// 4 7 # 4
